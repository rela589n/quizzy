<?php


namespace App\Models;


use App\Models\Concerns\OverridesQueryBuilder;
use App\Models\Query\CustomBuilder;
use App\Models\Query\CustomEloquentBuilder;

abstract class Model extends \Illuminate\Database\Eloquent\Model
{
    use OverridesQueryBuilder;

    public function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
    {
        return parent::whereIntegerInRaw($column, $values, $boolean, $not); // TODO: Change the autogenerated stub
    }

    /**
     * Implemented support for nested dot notation ('user.group')
     *
     * @param  string  $key
     * @return bool
     */
    public function relationLoaded($key)
    {
        if (!str_contains($key, '.')) {
            return parent::relationLoaded($key);
        }

        $relationNames = explode('.', $key);

        // Find the relation we are dealing with.
        $topRelation = array_shift($relationNames);

        if (!parent::relationLoaded($topRelation)) {
            return false;
        }

        /** @var Model $relation */
        $relation = $this->relations[$topRelation];

        // Build the new key to be verified on relation model instance.
        $key = implode('.', $relationNames);

        return $relation->relationLoaded($key);
    }

    /**
     * Added support for dot notation
     *
     * @param  string  $relation
     * @return mixed|void
     */
    public function getRelation($relation)
    {
        if (!str_contains($relation, '.')) {
            return parent::getRelation($relation);
        }

        $relationNames = explode('.', $relation);

        // Find the relation we are dealing with.
        $topRelation = array_shift($relationNames);

        /** @var Model $topRelated */
        $topRelated = parent::getRelation($topRelation);

        // Build the new key to be verified on relation model instance.
        $others = implode('.', $relationNames);

        return $topRelated->getRelation($others);
    }

    public function newEloquentBuilder($query)
    {
        return new CustomEloquentBuilder($query);
    }
}
